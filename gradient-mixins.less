// **** GRADIENTS ****
// 
// .gradient(linear, 0, #FF0000);
// .gradient(linear, 45, #FF0000, #333);
//
// .gradient(radial, #FF0000);
// .gradient(radial, #FF0000, #333);
//
// .gradient-with-hover(linear, 0, #FF0000);
// .gradient-with-hover(linear, 45, #FF0000, #333);
//
// .gradient-with-hover(radial, #FF0000);
// .gradient-with-hover(radial, #FF0000, #333);




// @direction = radial
// @middleColor = single color, will get lighter and darker colors by 5%
.gradient(@direction, @middleColor) when (@direction = radial){
	@startColor: lighten(@middleColor, 5%);
	@endColor: darken(@middleColor, 5%);
	.drawRadialGradient(@startColor, @endColor);
}

// @direction = linear
// @middleColor = single color, will get lighter and darker colors by 5%
// @angle = 0 - 360
.gradient(@direction, @middleColor) when (isnumber(@direction)){
	@startColor: lighten(@middleColor, 5%);
	@endColor: darken(@middleColor, 5%);
	.drawLinearGradient(@direction, @startColor, @endColor);
}


// @direction = radial
// @startColor = color to start gradient from
// @endColor = color to end gradient at
// @angle = 0 - 360
.gradient(@direction, @startColor, @endColor) when (@direction = radial){
	.drawRadialGradient(@startColor, @endColor);
}

// @direction = linear
// @startColor = color to start gradient from
// @endColor = color to end gradient at
// @angle = 0 - 360
.gradient(@direction, @startColor, @endColor) when (isnumber(@direction)){
	.drawLinearGradient(@direction, @startColor, @endColor);
}






// @direction = radial
// @middleColor = single color, will get lighter and darker colors by 5%
.gradient-with-hover(@direction, @middleColor) when (@direction = radial){
	@startColor: lighten(@middleColor, 5%);
	@endColor: darken(@middleColor, 5%);
	.drawRadialGradient(@startColor, @endColor);
	&:active, &:hover {
		.drawRadialGradient(@endColor, @startColor);
	}
	&:visited {
		.drawRadialGradient(@startColor, @endColor);
	}
}

// @direction = radial
// @startColor = color to start gradient from
// @endColor = color to end gradient at
.gradient-with-hover(@direction, @startColor, @endColor) when (@direction = radial){
	.drawRadialGradient(@startColor, @endColor);
	&:active, &:hover {
		.drawRadialGradient(@endColor, @startColor);
	}
	&:visited {
		.drawRadialGradient(@startColor, @endColor);
	}
}

// @direction = linear
// @middleColor = single color, will get lighter and darker colors by 5%
// @angle = 0 - 360
.gradient-with-hover(@direction, @middleColor) when (isnumber(@direction)){
	@startColor: lighten(@middleColor, 5%);
	@endColor: darken(@middleColor, 5%);
	.drawLinearGradient(@direction, @startColor, @endColor);
	&:active, &:hover {
		.drawLinearGradient(@direction, @endColor, @startColor);
	}
	&:visited {
		.drawLinearGradient(@direction, @startColor, @endColor);
	}
}

// @direction = linear
// @startColor = color to start gradient from
// @endColor = color to end gradient at
// @angle = 0 - 360
.gradient-with-hover(@direction, @startColor, @endColor) when (isnumber(@direction)){
	.drawLinearGradient(@direction, @startColor, @endColor);
	&:active, &:hover {
		.drawLinearGradient(@direction, @endColor, @startColor);
	}
	&:visited {
		.drawLinearGradient(@direction, @startColor, @endColor);
	}
}



// linear mixin function
// need to figure out -webkit-gradient angle
.drawLinearGradient(@angle, @startColor, @endColor) {
	@angleDeg: unit(@angle, deg);
	@argbStartColor: argb(@startColor);
	@argbEndColor: argb(@endColor);
	background-color: @startColor;
	background-image: -webkit-gradient(linear,0% 0%, 0% 100%,from(@startColor),to(@endColor));
	background-image: -webkit-linear-gradient(@angleDeg,@startColor,@endColor);
	background-image: -moz-linear-gradient(@angleDeg, top,@startColor,@endColor);
	background-image: -ms-linear-gradient(@angleDeg,@startColor,@endColor);
	background-image: -o-linear-gradient(@angleDeg,@startColor,@endColor);
	background-image: linear-gradient(@angleDeg,@startColor,@endColor);
	filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='@{startColor}',EndColorStr='@{endColor}');
	-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=@{argbStartColor}, endColorstr=@{argbEndColor})";
}

// radial mixin function
.drawRadialGradient(@startColor, @endColor) {
	@argbStartColor: argb(@startColor);
	@argbEndColor: argb(@endColor);
	background-color: @startColor;
	background-image: -moz-radial-gradient(center, ellipse cover,  @startColor, @endColor);
	background-image: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(@startColor), color-stop(@endColor));
	background-image: -webkit-radial-gradient(center, ellipse cover, @startColor, @endColor);
	background-image: -o-radial-gradient(center, ellipse cover, @startColor, @endColor);
	background-image: -ms-radial-gradient(center, ellipse cover, @startColor, @endColor);
	background-image: radial-gradient(ellipse at center, @startColor, @endColor);
	filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='@{startColor}',EndColorStr='@{endColor}');
	-ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=@{argbStartColor}, endColorstr=@{argbEndColor})";
}
